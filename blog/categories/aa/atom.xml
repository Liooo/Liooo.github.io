<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: aa | Ryo's Engieer Blog]]></title>
  <link href="http://liooo.github.io/blog/categories/aa/atom.xml" rel="self"/>
  <link href="http://liooo.github.io/"/>
  <updated>2015-02-14T20:59:59+09:00</updated>
  <id>http://liooo.github.io/</id>
  <author>
    <name><![CDATA[Ryo Yamada]]></name>
    <email><![CDATA[ryoyamada3@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails E2E Test Environment by Rspec, Turnip, Capybara, Selenium and Poltergeist]]></title>
    <link href="http://liooo.github.io/blog/2015/02/13/rails-e2e-test-environment-by-rspec-turnip-capybara-selenium-and-poltergeist/"/>
    <updated>2015-02-13T12:52:09+09:00</updated>
    <id>http://liooo.github.io/blog/2015/02/13/rails-e2e-test-environment-by-rspec-turnip-capybara-selenium-and-poltergeist</id>
    <content type="html"><![CDATA[<p>Instruction to set up a Rails E2E test environment, which covers Google Chrome, FireFox and PhantomJS as test browsers.</p>

<p>See <a href="https://github.com/Liooo/rails4_turnip_capybara_selenium_poltergeist">Liooo/rails4_turnip_capybara_selenium_poltergeist</a> for the complete app.</p>

<!-- more -->

<h3 id="basic-setup">Basic Setup</h3>

<p>Add the following lines in Gemfile.</p>

<p><code>ruby Gemfile
group :test do
  gem 'turnip'
  gem 'rspec-rails'
  gem "capybara"
  gem 'poltergeist'
  gem 'selenium-webdriver'
end
</code></p>

<p>Then run <code>bundle install</code>.</p>

<p>Execute <code>rails g rspec:install</code>, which generates .rspec file and spec directory.
Add the following line in .rspec file to tell Rspec to run turnip tests.</p>

<p><code>ruby .rspec
-r turnip/rspec
</code></p>

<p>Now write features, make features/ directory under spec/ and create a feature file.</p>

<p><figure class='code'><figcaption><span>spec/features/my_test.feature</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Feature: Test a Feature&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;Scenario: Let’s test
</span><span class='line'>    When it executes
</span><span class='line'>    Then it passes</span></code></pre></td></tr></table></div></figure></p>

<p>Add steps directory, and write steps.</p>

<p><figure class='code'><figcaption><span>spec/features/steps/my_test_steps.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">step</span> <span class="err">‘</span><span class="n">it</span> <span class="n">executes</span><span class="err">’</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span> <span class="err">‘</span><span class="o">/</span><span class="err">’</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;step ‘it passes’ do</span>
</span><span class='line'><span class="sr">  expect(1).to be(1)</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Then create turnip_helper.rb and make it like this.</p>

<p><figure class='code'><figcaption><span>spec/turnip_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="err">‘</span><span class="n">turnip</span><span class="err">’</span>
</span><span class='line'><span class="nb">require</span> <span class="err">‘</span><span class="n">turnip</span><span class="o">/</span><span class="n">capybara</span><span class="err">’</span> <span class="c1"># to use Capybara DSL methods in steps</span>
</span><span class='line'><span class="nb">require</span> <span class="err">‘</span><span class="n">capybara</span><span class="err">’</span>
</span><span class='line'><span class="nb">require</span> <span class="err">‘</span><span class="n">selenium</span><span class="o">-</span><span class="n">webdriver</span><span class="err">’</span>
</span><span class='line'><span class="nb">require</span> <span class="err">‘</span><span class="n">capybara</span><span class="o">/</span><span class="n">poltergeist</span><span class="err">’</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;table&gt;</span>
</span><span class='line'><span class="sr">  &lt;tbody&gt;</span>
</span><span class='line'><span class="sr">    &lt;tr&gt;</span>
</span><span class='line'><span class="sr">      &lt;td&gt;Dir.glob( File.expand_path(“../</span><span class="n">features</span><span class="o">/</span><span class="n">steps</span><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*/&lt;</span><span class="sr">/em&gt;steps.rb”, &lt;strong&gt;FILE&lt;/s</span><span class="n">trong</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">){</span><span class="o">&lt;</span><span class="sr">/td&gt;</span>
</span><span class='line'><span class="sr">      &lt;td&gt;f&lt;/</span><span class="n">td</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="n">td</span><span class="o">&gt;</span><span class="nb">load</span> <span class="n">f</span><span class="p">,</span> <span class="kp">true</span>  <span class="p">}</span><span class="o">&lt;</span><span class="sr">/td&gt;</span>
</span><span class='line'><span class="sr">    &lt;/</span><span class="n">tr</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sr">/tbody&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">table</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Capybara</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">javascript_driver</span> <span class="o">=</span> <span class="ss">:selenium</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">current_driver</span> <span class="o">=</span> <span class="ss">:selenium</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><a href="https://github.com/jnicklas/turnip">Turnip</a> explains what turnip_helper.rb is.</p>

<blockquote>
  <p>Before loading your spec_helper, Turnip also tries to load a file called turnip_helper where you can setup anything specific to your turnip examples. You might find it beneficial to load your steps from this file so that they don’t have to be loaded when you run your other tests.</p>
</blockquote>

<p>Now your test should be able to run.
Spin up server by <code>rails server</code> and run <code>rspec</code>.
You’ll see FireFox browser starts up and the test result is shown in the console.</p>

<h3 id="changing-browser">Changing Browser</h3>

<p>You can see the available browser drivers by <code>Capybara.drivers</code> in ruby code.
By default you’ll only see <code>rack_test</code>. Here’s how to add other drivers.</p>

<h4 id="phantomjs">PhantomJS</h4>

<p>If you don’t have PhantomJS executable, get it first.
In MacOS you can install with homebrew.</p>

<p><code>sh
brew install phantomjs
</code></p>

<p>Then tell capybara to use PhantomJS. We specify the <code>:poletergeist</code> which is a PhantomJS driver for Capybara.</p>

<p><code>ruby spec/turnip_helper.rb
Capybara.configure do |c|
  c.javascript_driver = :poltergeist
  c.current_driver = :poltergeist
end
</code></p>

<h4 id="google-chrome">Google Chrome</h4>

<p>Add the following gem.</p>

<p><code>ruby Gemfile
gem "chromedriver-helper"
</code></p>

<p>This gem installs chromedriver in gem path.
You can download chromedriver manually as well, but why not be lazy.</p>

<p>Finally, register the driver and tell capybara to use chrome.</p>

<p><figure class='code'><figcaption><span>spec/turnip_helper.rb</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;seleniumchrome-is-just-a-name-you-set-you-can-make-it-whatever-you-want&quot;</span><span class="o">&gt;</span><span class="ss">:selenium_chrome</span> <span class="n">is</span> <span class="n">just</span> <span class="n">a</span> <span class="nb">name</span> <span class="n">you</span> <span class="n">set</span><span class="p">,</span> <span class="n">you</span> <span class="n">can</span> <span class="n">make</span> <span class="n">it</span> <span class="n">whatever</span> <span class="n">you</span> <span class="n">want</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'><span class="sr">&lt;p&gt;Capybara.register_driver :selenium_chrome do |app|</span>
</span><span class='line'><span class="sr">  Capybara::Selenium::Driver.new(app, :browser =&amp;gt; :chrome)</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Capybara</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">javascript_driver</span> <span class="o">=</span> <span class="ss">:selenium_chrome</span>
</span><span class='line'>  <span class="n">c</span><span class="o">.</span><span class="n">current_driver</span> <span class="o">=</span> <span class="ss">:selenium_chrome</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<h4 id="other-browsers">Other browsers</h4>

<p>I haven’t searched yet, these documents might help.</p>

<p><a href="https://code.google.com/p/selenium/wiki/InternetExplorerDriver">InternetExplorer</a></p>

<p><a href="https://code.google.com/p/selenium/wiki/OperaDriver">Opera</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[East Asian Multibyte Character Piles Up in Vim/iTerm2/OS X Environment]]></title>
    <link href="http://liooo.github.io/blog/2014/11/28/east-asian-multibyte-character-piles-up-in-vim-slash-iterm2-slash-os-x-environment/"/>
    <updated>2014-11-28T17:38:47+09:00</updated>
    <id>http://liooo.github.io/blog/2014/11/28/east-asian-multibyte-character-piles-up-in-vim-slash-iterm2-slash-os-x-environment</id>
    <content type="html"><![CDATA[<p><img src="/images/20141128/characters_piling_up.png" alt="characters pililng up" /></p>

<p>Multibyte characters were piling up to each other in my vim on iTerm2 like above.</p>

<p>Here’s how to fix this.</p>

<h3 id="vim-setting">vim setting</h3>
<p>Add the following line to .vimrc</p>

<p><code>sh ~/.vimrc
set ambiwidth=double
</code></p>

<p>It’s telling vim to double the width of characters having <a href="http://www.unicode.org/reports/tr11/#Ambiguous">Ambiguous Character Width</a>.</p>

<h3 id="iterm2-setting">iTerm2 setting</h3>

<p>Tick the checkbox and tell iTerm2 to do the same. </p>

<p><img src="/images/20141128/iTerm2_setting.png" alt="iTerm2" /></p>

<p>That’s it, fixed!</p>

<p><img src="/images/20141128/fixed.png" alt="fixed" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Form for Multiple File Upload in Rails Way]]></title>
    <link href="http://liooo.github.io/blog/2014/11/22/building-multiple-file-upload-form-in-rails-way/"/>
    <updated>2014-11-22T16:32:05+09:00</updated>
    <id>http://liooo.github.io/blog/2014/11/22/building-multiple-file-upload-form-in-rails-way</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#background">Background</a></li>
  <li><a href="#gems-to-use">Gems to Use</a>    <ul>
      <li><a href="#carrierwave">CarrierWave</a></li>
      <li><a href="#cocoon">Cocoon</a></li>
    </ul>
  </li>
  <li><a href="#instruction">Instruction</a>    <ul>
      <li><a href="#scaffolding-the-app">Scaffolding the App</a></li>
      <li><a href="#form-for-hasmany-relation-with-cocoon">Form for has_many relation with Cocoon</a></li>
      <li><a href="#showing-thumbnail">Showing Thumbnail</a></li>
      <li><a href="#redisplaying-thumbnail-on-validation-fail">Redisplaying thumbnail on validation fail</a></li>
      <li><a href="#rejecting-empty-photo-fields">Rejecting Empty Photo Fields</a></li>
    </ul>
  </li>
</ul>

<h3 id="background">Background</h3>
<p>When you build a form in “Rails way”, you don’t have to do much on your own.
It automatically validates the parameter, and re-renders the form with proper messages in the event of errors.</p>

<p>However, when it comes to file upload form, things get complicated.
For instance, when the form is redisplayed because of the form error, the file input value is lost.
You don’t want to make users select the same file again, just because they mistyped their email address or phone number. Especially when they chose
a bunch of files to upload. It’s also bad in terms of website performance (We don’t want them to send large image files again and again).</p>

<p>We could use javascript file upload plugins (lots of them are opensource, cool, well animated and fantastic). But they normally make source code difficult to manage
if you’ve been doing things in “Rails way”.</p>

<p>Here I’ll introduce a way to build a file upload form in “Rails way”, which gets along with Rails activeform and requires minimum effort to build, but still does enough.
Concretely,</p>

<ul>
  <li>Uploads multiple files at a time.</li>
  <li>Can add/remove multiple file input fields dynamically.</li>
  <li>Shows preview when an image file is chosen.</li>
  <li>If an errors exist in the form, the file inputs memorize and redisplay the selected file.</li>
  <li>Also, the server caches the once-uploaded-file in the event of form redisplay, so no additional network traffic occurs.</li>
  <li>Can remove existing files.</li>
  <li>Use plain html form, NOT xhr (therefore, no file drag and drop feature).</li>
</ul>

<p>See <a href="https://github.com/Liooo/carrierwave-cocoon-file-upload-app-demo">Github Repository</a> for the complete app.</p>

<!-- more -->

<h3 id="gems-to-use">Gems to Use</h3>

<h4 id="carrierwave">CarrierWave</h4>

<p>Use <a href="https://github.com/carrierwaveuploader/carrierwave">CarrierWave</a> to handle files in the app.</p>

<p>You could also consider using the following.</p>

<ul>
  <li><a href="https://github.com/markevans/dragonfly">Dragonfly</a></li>
  <li><a href="https://github.com/thoughtbot/paperclip">Paperclip</a> (but this doesn’t support <a href="https://github.com/carrierwaveuploader/carrierwave#making-uploads-work-across-form-redisplays">file cache</a> )</li>
</ul>

<h4 id="cocoon">Cocoon</h4>

<p><a href="https://github.com/nathanvda/cocoon">Cocoon</a> helps generating multiple input fields for has_many relation models.</p>

<h3 id="instruction">Instruction</h3>

<h4 id="scaffolding-the-app">Scaffolding the App</h4>

<p>New up a rails app, and add the following lines to Gemfile, then run <code>bundle install</code>.</p>

<p><figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="err">“</span><span class="n">carrierwave</span><span class="err">”</span>
</span><span class='line'><span class="n">gem</span> <span class="err">“</span><span class="n">cocoon</span><span class="err">”</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;gem “slim”</span>
</span><span class='line'><span class="sr">gem “slim-rails”</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Create models and carrierwave uploaders.</p>

<pre><code>rails g scaffold user name:string
rails g model user_photo photo:string user_id:integer
rails g uploader photo
rake db:migrate
</code></pre>

<p>And make models looks like followoing.</p>

<p>&#8220;` ruby app/models/*.rb</p>

<pre><code>class User &lt; ActiveRecord::Base
  has_many :user_photos
  validates_presence_of :name
  accepts_nested_attributes_for :user_photos, allow_destroy: true
end

class UserPhoto &lt; ActiveRecord::Base
  belongs_to :user
  mount_uploader :photo, PhotoUploader
end ```
</code></pre>

<h4 id="form-for-hasmany-relation-with-cocoon">Form for has_many relation with Cocoon</h4>

<p>Add the following lines inside <code>form_for</code> block in the default user form.</p>

<p>&#8220;` slim app/views/users/_form.html.slim
= form_for @user do |f|</p>

<p>/ ..
  = f.fields_for :user_photos do |photo|
    = render ‘user_photo_fields’, f: photo
  .links= link_to_add_association ‘add a photo’, f, :user_photos</p>

<p>&#8220;`</p>

<p>Then, create the following partial file.</p>

<p><code>slim app/views/users/_user_photo_fields.slim.html
.nested-fields
  = f.file_field :photo
  = link_to_remove_association "remove", f
</code></p>

<p><code>link_to_add_association</code> and <code>link_to_remove_association</code> are helper methods provided by cocoon that generates link tags. These links dynamically adds/removes nested form for has_many relation model.
<code>_user_photo_fields.html.slim</code> is the template included as nested form.  You have to add the following line to application.js to take advantage of cocoon. (Also, you shouldn’t change <code>div.nested-fields</code> surrounding <code>link_to_remove_association</code>, because cocoon is depending on it)</p>

<p><code>js app/assets/js/application.js
//= require cocoon
</code></p>

<p>tweak strong_parameter so that the backend accepts parameters for user_photos.</p>

<p><code>ruby app/controllers/users_controller.rb
def user_params
  params.require(:user).permit(:name, :email, user_photos_attributes: [:id, :photo, :_destroy])
end
</code></p>

<p>Now open up a browser and go to /users/new, you can at least create a user with photos through the form.</p>

<h4 id="showing-thumbnail">Showing Thumbnail</h4>

<p>Currently if you go to /users/:id, only name of the user is shown.
To show the thumbnails of the photos, add the following line to show.html.slim.</p>

<p><code>slim app/views/users/show.html.slim
- @user.user_photos.each do |user_photo|
  .thumb= image_tag user_photo.photo.url
</code></p>

<p>and some styles.</p>

<p><code>scss app/assets/stylesheets/users.css.scss
.thumb{
  img{ 
    width: 50px;
    height: 50px;
  }
}
</code></p>

<p>It’d be nice if you can also see thumbnails right after choosing photos.
Add some javascript and style change to achieve this.</p>

<p>&#8220;` coffee app/assets/javascripts/users.js.coffee
$(document).on(‘page:change’, ()-&gt;
  onAddFile = (event) -&gt;
    file = event.target.files[0]
    url = URL.createObjectURL(file)</p>

<pre><code>thumbContainer = $(this).parent().next('td').find('.thumb')

if thumbContainer.find('img').length == 0
  thumbContainer.append('&lt;img src="' + url + '" /&gt;')
else
  thumbContainer.find('img').attr('src', url)
</code></pre>

<p># for redisplayed file inputs and file inputs in edit page
  $(‘input[type=file]’).each(()-&gt;
      $(this).change(onAddFile)
  )</p>

<p># register event handler when new cocoon partial is inserted from link_to_add_association link
  $(‘body’).on(‘cocoon:after-insert’, (e, addedPartial) -&gt;
    $(‘input[type=file]’, addedPartial).change(onAddFile)
  )</p>

<p># tell cocoon where to insert partial
  $(‘a.add_fields’).data(‘association-insertion-method’, ‘append’)
  $(‘a.add_fields’).data(“association-insertion-node”, ‘table.user-photo-form tbody’)
)</p>

<p>&#8220;`</p>

<p>Pretiffy the nested form a bit by putting them in table tag. </p>

<p><code>slim app/views/users/_form.html.slim
= form_for @user do |f|
  /..
  table.user-photo-form
    thead
      tr
        td input 
        td preview
        td remove
    tbody
      = f.fields_for :user_photos do |photo|
        = render 'user_photo_fields', f: photo
  .links= link_to_add_association 'add a photo', f, :user_photos
</code></p>

<p>Wrap nested forms in tr.</p>

<p><code>slim app/views/users/_user_photo_fields.html.slim
tr.nested-fields
  td= f.file_field :photo
  td.thumb
  td= link_to_remove_association "remove", f
</code></p>

<p>Add some styles.</p>

<p><code>scss app/assets/stylesheets/users.css.scss
.user-photo-form{
    td{
        width: 300px;
        padding: 10px 20px 10px 20px;
    }
}
</code></p>

<h4 id="redisplaying-thumbnail-on-validation-fail">Redisplaying thumbnail on validation fail</h4>

<p>Now select some files and submit the form with name field being blank. The validation fails, and you see the selected files are competely lost in the redisplayed form. 
Carrierwave has a nice feature for handling this situation. It not only lets us keep track of the uploaded files, but also caches them so that we don’t have to send the same ones on every validation fail.</p>

<p>What we need to do is just to addd a hidden field for cached photo as #4 below shows. Then CarrierWave automatically associates the model with cached file and saves when validation passes. (if you select an another new file, this cache will be ignored)</p>

<p><code>slim app/views/users/_user_photo_fields.html.slim
tr.nested-fields
  td 
    = f.file_field :photo
    = f.hidden_field :photo_cache, :value =&gt; f.object.photo_cache
  td.thumb
    - if f.object.photo.url.present?
      = image_tag f.object.photo.url 
  td= link_to_remove_association "remove", f
</code></p>

<p>Add photo_cache to strong_parameter</p>

<p><code>ruby app/controllers/users_controller.rb
def user_params
  params.require(:user).permit(:name, :email, user_photos_attributes: [:id, :photo, :photo_cache, :_destroy])
end
</code></p>

<h4 id="rejecting-empty-photo-fields">Rejecting Empty Photo Fields</h4>

<p>If you fill in the name, click ‘add a photo’ button several times and post it, you’ll see models with no photo are created. To avoid this, use <code>reject_if</code> option. </p>

<p><code>ruby app/models/user.rb
class User &lt; ActiveRecord::Base
  has_many :user_photos
  validates_presence_of :name
  accepts_nested_attributes_for :user_photos, \
    reject_if: proc{ |param| param[:photo].blank? &amp;&amp; param[:photo_cache].blank? &amp;&amp; param[:id].blank? }, \
    allow_destroy: true
end
</code></p>

<p>You could also add a validator on the UserPhoto model to prevent creation of model with empty file.</p>
]]></content>
  </entry>
  
</feed>
